var ometajs = require("ometajs"),
    BSJSParser = ometajs.grammars.BSJSParser,
    BSJSIdentity = ometajs.grammars.BSJSIdentity,
    BSJSTranslator = ometajs.grammars.BSJSTranslator,
    esprima = require("esprima"),
    assert = require("assert"),
    // HACK having RegExp I need in this file breaks ometa
    repQ = require("./hack").repQ;


function toMozNode(ast) {
  var code = BSJSTranslator.match(ast, 'stmt'),
      mozAst = esprima.parse(code),
      body = mozAst.body;
  assert(body.length === 1);
  return body[0].expression;
}

function isLiteral(ast) {
  if (ast.type === 'Literal')
    return true;

  if (ast.type === 'Identifier' && ast.name === 'undefined')
    return true;

  if (ast.type === 'ObjectExpression') {
    return ast.properties.every(function(prop) {
      return isLiteral(prop.value);
    });
  }

  return false;
};


ometa BEMHTMLParser <: BSJSParser {
  isKeyword :x = ?(BSJSParser._isKeyword(x) || x === 'local'),

  primExprHd = "local" "(" expr:a ")" asgnExpr:b -> [#localKwd, a, b]
    | ^primExprHd,

  stmt = "local" "(" expr:a ")" stmt:b  -> [#localKwd, a, b]
    | "return" ( expr
                 | empty -> [#noop] ):e sc -> [#return, e]
    | ^stmt,

  bemMatch = bemBlock | bemElem | bemMod,

  bemVal = (letter | digit | '-')+:xs -> [#string, xs.join('')],
  bemVal = asgnExpr:e -> e,

  bemPredic :n = spaces seq(n):nn space+ -> nn,

  bemBlock = bemPredic('block'):n bemVal:v -> [#block, v],
  bemElem = bemPredic('elem') bemVal:v -> [#elem, v],
  bemModVal = iName:n ?(n === 'true' || n === 'false') -> [#get, n]
            | bemVal,
  bemMod = bemPredic('mod') bemVal:m space+ bemModVal:v -> [#blockMod, m, v],
  bemMod = bemPredic('elemMod') bemVal:m space+ bemModVal:v -> [#elemMod, m, v],

  bemCustom = asgnExpr:e -> [#xjst, e],

  bemhtmlSet = spaces <letter (letter | digit | '-' | '_')*>:nn
               &(spaces ('{' | ':' | ','))
               ?(!BEMHTMLParser._isPrimitive(nn))
               -> [ nn ],

  bemMatchAndSet = (bemMatch | bemhtmlSet | bemCustom),
  listBemMatchAndSet %(this.predicates = []) = bemMatchAndSet:t spaces
                     ( ',' spaces listBemMatchAndSet:ts -> {
                       [t, ts]
                     } | '{' spaces listBemMatchAndSet+:ts spaces '}'
                          spaces -> {
                            [t, ts]
                     } | ':' (asgnExpr:e -> isLiteral(toMozNode(e))?
                              [#literal, e]:
                              [#begin, [#return, e]]
                             | stmt):c ','? ->
                       [t, [#body, c]]
                     ):r -> {
                       if (this.predicates.length === 0) return r;
                       BEMHTMLParser._concatChildren(
                         [#xjst, this.predicates],
                         r
                       )
                     } | ^stmt:r -> [#stmt, r],

  topLevel = listBemMatchAndSet*:ts spaces end -> {
    BEMHTMLParser._dropAllSubs(ts)
  }
}

BEMHTMLParser._primitives = {
  'true': true,
  'false': true,
  'null': true,
  'undefined': true,
  'NaN': true,
  'Infinity': true
};

BEMHTMLParser._isPrimitive = function(name) {
  return BEMHTMLParser._primitives[name];
};

BEMHTMLParser._concatChildren = function(p, cs) {
  if (cs[0] !== 'sub') return [p].concat(cs);

  return [#sub, [].concat.apply([], cs[1].map(function(cs) {
    var cc = BEMHTMLParser._concatChildren(p, cs);
    return cc[0] === 'sub' ? cc[1] : [cc];
  }))];
};

BEMHTMLParser._dropAllSubs = function(ts) {
  return [].concat.apply([], ts.map(function(t) {
    return t[0] === 'sub' ? t[1] : [t];
  }));
};

ometa Binding <: BSJSTranslator {
  getp = [#string :p] [#this] trans([#get, p])
    | ^getp
}

function transformApply(fn, bindings) {
  var stringMode,
      result = [#call, fn];
  // flatten bindings and filter any string-arg out
  var bs = [].concat.apply([], bindings).filter(function (b) {
    if (b[0] === #binding) return true;
    if (b[0] === #string) {
      stringMode = b;
      return false;
    }
  });

  // add stringMode to result
  stringMode && result.push(stringMode);

  // create an objarg if there're bindings and add em to result
  bs.length && result.push([#json].concat(bs));

  // string-arg comes before the objarg
  return result;
};

// var pp = require("ze-helpers").prettyPrint;
// // DEBUG = true;

ometa BEMHTMLTransformer <: BSJSIdentity {
  // debug :what text = ?(DEBUG) {pp(what, {prompt: "" + text});}
  //   | -> true,

  bhPredic = [#block :e] -> [#block, e],
  bhPredic = [#blockMod :m :v] -> [#blockMod, m, v],
  bhPredic = [#elem :e] -> [#elem, e],
  bhPredic = [#elemMod :m :v] -> [#elemMod, m, v],

  // Wrap custom predicates in a func
  // TODO drop !this.elem in predicates
  // TODO wrap this.elem preds in elemMatch
  notElem = [ #unop '!' [ #getp [ #string #elem ] [ #this ] ] ],
  notelem -> [#notelem],
  isNotElem = [#notelem],
  bhPredic = [#xjst notElem] -> [#notelem],
  bhPredic = [#xjst :e] -> [hasThisElem(e)? #elemMatch: #match,
                            [#func, null, [],
                             [#begin, [#stmt, [#return, e]]]]],
  bhPredic = [#match :e] -> [#match, e],

  bhPredic = [#std :m] -> [#std, m],
  bhPredic = [#mode :m] -> [#mode, m],
  maybeDef = #default -> #def,
  maybeDef = :m -> m,
  bhPredic = [ maybeDef:m ] -> this.getMode(m),

  last :bs -> ((bs.length === 0)? null: bs[bs.length - 1]),

  // TODO some begins are stolen by curlyTrans. Fix this if they need to also
  // return apply say from if-else. @arikon says we do not.
  begin    trans:x end returnApply(x):e -> ([#begin, e]),
  begin    trans*:xs last(xs):xe (?(xe) returnApply(xe):e  -> ([#begin].concat(xs.slice(0, -1), [e]))
                                  | -> ([#begin].concat(xs))),

  // force return apply and friends
  returnApply = [#stmt [ #call [#get (#applyNext | #apply | #applyCtx)] anything*]:a] -> [#stmt, [#return, a]]
    | anything:a -> a,

  noop -> [#noop],

  // NOTE handle apply, applyNext, local args specially, preserve string-arg
  // passed to apply, contract the rest onto objarg
  call = [#get (#applyNext | #apply)]:fn applyArg+:bindings
    -> transformApply(fn, bindings)
    | ^call,
  applyArg ([#set :prop :val] {Binding.match(prop, 'stmt')}:b -> [[#binding, b, val]]
            | [#json (anything*):bs] -> bs
            | [#string anything]:m -> [m]
           ),

  larg = [#binop ',' larg:l larg:r] -> [].concat.apply([], [l, r]),
  larg = :s -> [s],
  largs = [applyArg*:bindings] ->  {
    bindings.length?
      [[].concat.apply([#json], bindings)]:
      bindings
  },
  localKwd larg:args largs(args):as trans:body -> [#localKwd,
                                              [#call, [#get, #local]].concat(as),
                                              body],

  wrapBody = [#literal :b] -> [#literal, b]
    | trans:b -> [#func, null, [], b],

  bhBody = [#body :b] trans([#wrapBody, b]):wb -> [#body, wb],
  subBlock = [#sub :ts] -> [#sub, ts],
  subBlock = [subTemplate+:ts] -> (ts.length === 1)?
    // NOTE collapse nesting with single sub-template
    [#dot, ts[0]]:
    [#sub, ts],
  subMethod = [#dot :ts] -> [#dot, ts],
  subMethod = subTemplate:ts -> [#dot, ts],

  subTemplate = [bhPredic:ps
                 (bhBody:b       -> b
                  | subBlock:s   -> s
                  | subMethod:m  -> m
                 ):ts] -> [ps, ts],

  bhTemplate = [#template :t] -> [#template, t],
  bhTemplate = [bhPredic:ps
                (bhBody:b        -> b
                 | subMethod:m   -> m
                 | subBlock:s    -> s
                ):ts]            -> [#template, [ ps, ts ]]
    | [#stmt anything]:r -> r,

  // Postprocess the result with Predicates grammar that drops !this.elem
  topLevel = [bhTemplate+:ts] -> (this.postTransform(ts)),
  topLevel = bhTemplate:t -> (this.postTransform([t])),
  topLevel = end -> []
}

// Grammar for dropping !this.elem from predicates
ometa DropNotElem <: BSJSIdentity {
  templates = [trans*:ts] -> ([].concat.apply([], ts)),

  // Should only handle top-level statements, never a template body
  stmt :s -> [[#stmt, s]],

  // template always returns an array of templates so that we can correctly
  // handle the sub case (below)
  template [[#notelem] [#dot :d]] -> [[#template, d]],
  // split subs into separate templates to be spliced at the level above
  template [[#notelem] [#sub :d]] -> (d.map(function (t) { return [#template, t]; })),
  template [:p trans:s]           -> [[#template, [p, s]]],

  sub [subt+:ts] -> ([#sub, [].concat.apply([], ts)]),

  subt [[#notelem] [#dot :d]] -> [d],
  subt [[#notelem] [#sub :d]] -> (d.map(function (t) { return t; })),
  // TODO weird case that doesn't seem to pop up in real life yet would require
  // much work. The only case where I prefer to just leave !this.elem as is and
  // not drop it. For now.
  // block input, this.isTrue {
  // !this.elem: { return; }
  // content, !this.elem: { return; }
  // }
  subt [[#notelem] [#body anything]:b] -> {
    var res = [[[#match,
                 [#func, null, [],
                  [#begin, [#stmt, [#return, [ #unop, "!", [ #getp, [ #string, #elem ], [ #this ] ] ]]]]]],
                b]];
    return res;
  },
  subt [:p trans:s] -> [[p, s]],

  dot [[#notelem] :d] -> d,
  // nothing to drop, go deeper
  dot [:p trans:d]    -> [#dot, [p, d]],

  body :b -> [#body, b]
}

ometa HasThisElem <: BSJSIdentity {
  getp [ #string #elem] [ #this ] -> (thisElemFound()),
  getp  :fd :x                    -> [#getp, fd, x],
}

ometa ReplaceThis <: BSJSIdentity {
  getp [ #string '_'] [ #this ]        -> [#this],
  getp  :fd trans:x                    -> [#getp, fd, x],
  noop                                 -> [#noop],
  block trans:e                        -> [#block, e],
  blockMod trans:m trans:v             -> [#blockMod, m, v],
  elem trans:e                         -> [#elem, e],
  elemMod trans:m trans:v              -> [#elemMod, m, v],
  match trans:e                        -> [#match, e],
  elemMatch trans:e                    -> [#elemMatch, e],
  localKwd trans:c curlyTrans:b        -> [#localKwd, c, b],
  literal trans:b                      -> [#literal, b],
  body trans:b                         -> [#body, b],
  std :m                               -> [#std, m],
  mode :m                              -> [#mode, m],
  sbody = [trans*:ss]                  -> ss,
  sub [sbody*:s]                       -> [#sub, s],
  dot [trans*:e]                       -> [#dot, e],
  // do not touch this._ outside of templates
  template =  [ #stmt :s ]             -> [#stmt, s],
  template =  [ #template [trans*:e] ] -> [#template, e],
  templates = [template*:ts]           -> ts
}

function dropNotElem(ts) {
  return DropNotElem.match(ts, "templates");
}

function replaceThisUnder(ts) {
  return ReplaceThis.match(ts, "templates");
}

BEMHTMLTransformer.prototype.postTransform = function postTransform(ts) {
  var result = dropNotElem(ts);
  return (this._options.replace_this_)? replaceThisUnder(result): result;
}

function thisElemFound() { throw "thisElem"; }

function hasThisElem(ast) {
  try {
    HasThisElem.match(ast, "trans");
  } catch (e) {
    e.message === "thisElem";
    return true;
  }
  return false;
}

BEMHTMLTransformer.prototype.getMode = function getMode(m) {
  var modes = ['tag', 'attrs', 'content', 'def', 'js', 'mix', 'bem', 'jsAttr', 'cls'];
  return modes.some(function (curr) { return curr === m; })?
    ['std', m]:
    ['mode', JSON.stringify(m)];
};

function hasParens(e) {
  try {
    if (BEMHTMLParser.matchAll(e, #primExprHd)[0] === #parens) return true;
  } catch (e) {
  }
  return false;
}

function joinWithSemi(iarr) {
  var res = [];
  iarr.forEach(function (s) {
    res.push(/};$/.test(s)? s.slice(0, -1): (s + ';'));
  })
  return res.join('');
}

function withSemi(s) { return /}$/.test(s)? (s + ';'): s; }

ometa BEMHTMLToJS <: BSJSTranslator {
  // HACK to drop empty statemets
  // HACK joinWithSemi to avoid semicolons after blocks but have them after any other stmt
  curlyTrans = [#begin curlyTrans:r] -> r
    | [#begin trans*:rs] -> ('{'
                             + joinWithSemi(rs.filter(function (e) { return e !== '';}))
                             + '}'
                            )
    | trans:r               -> ('{' + joinWithSemi([r]) + '}'),

  stmt = [#get #undefined] -> (''),
  stmt ^stmt,

  noop -> (''),

  // HACK parenthesized binop often return parens expr. Do not wrap in extra
  // parens when this happens.
  // TODO (indutny) fix this in ometa, it insists on wrapping binops in parens
  parens  trans:e (?hasParens(e) -> e
                   | -> ('(' + e + ')')),

  // NOTE maybe quote object keys
  binding  :name trans:val
    -> ((this.shouldQuote(name)? repQ(name, this._options.quotes): name) + ': ' + val),

  // NOTE maybe prefer double quotes
  string :s -> repQ(s + '', this._options.quotes),

  // NOTE drop empty else branch
  // HACK to drop semicolon after if-for-while blocks
  if trans:cond curlyTrans:t ([#get #undefined] -> ('if(' + cond + ')' + withSemi(t))
                              | curlyTrans:e    -> ('if(' + cond + ')' + t + 'else' + withSemi(e))),
  while    ^while:r -> withSemi(r),
  for      ^for:r -> withSemi(r),
  forIn    ^forIn:r -> withSemi(r),

  block trans:e                    -> ('block(' + e + ')' ),
  blockMod trans:m trans:v         -> ('mod(' + m + ',' + v + ')' ),
  elem trans:e                     -> ('elem(' + e + ')' ),
  elemMod trans:m trans:v          -> ('elemMod(' + m + ',' + v + ')' ),
  match trans:e                    -> ('match(' + e + ')' ),
  elemMatch trans:e                -> ('elemMatch(' + e + ')' ),
  localKwd trans:c curlyTrans:b         -> (c + '(function()' + b + ')'),

  literalBody = [#literal trans:b] -> b,
  body (literalBody:b              -> ('(' + b + ')')
        | trans:b                  -> ('(' + b + ')')),

  std :m   -> (m + '()'),
  mode :m  -> ('mode(' + repQ(JSON.parse(m), this._options.quotes) + ')'),

  subStmt = trans*:s               -> s.join(''),
  sbody = [subStmt*:ss]            -> ss.join(','),
  sub [sbody*:s]                   -> ('(\n' + s.join(',\n') + '\n)'),

  dot [trans*:e]                   -> ('.' + e.join('')),

  tbody = [ trans*:e ]             -> e.join(''),

  template = [#template tbody:t]   -> t,

  item = template:r -> r
       | [#stmt [#return anything]] -> ''
       | [#stmt
           [#unop '!'
             [#call [#func 'oninit' anything curlyTrans:body] anything*]
           ]
         ] -> ('oninit(function(exports) ' + body + ')')
       | [#stmt [#get #undefined]] -> ('')
       | [#stmt trans:r] -> r,

  topLevel = [ item*:rs ] -> (rs.join(';\n\n') + ';')
}

BEMHTMLToJS.prototype.isName = function isName(s) {
  var re = /^[a-z$_][a-z0-9$_]*$/i;
  return re.test(s);
};

BEMHTMLToJS.prototype.shouldQuote = function shouldQuote(s) {
  if (this._options.quote_keys) return true;
  if (!this.isName(s)) return true;
  if (this._options.quote_reserved &&
      (BSJSParser._isReserved(s) || BSJSParser._isKeyword(s))) return true;
  return false;
};
